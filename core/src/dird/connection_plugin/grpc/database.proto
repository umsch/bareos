/*
 * LICENSE HERE
 */

syntax = "proto3";

package bareos.database;

import "config.proto";
import "google/protobuf/timestamp.proto";

message ClientId {
  int64 id = 1;
}

message JobId {
  int64 id = 1;
};

message Range {
  uint64 offset = 1;
  uint64 limit  = 2;
};

message QueryOptions {
  Range range = 1;
};

enum JobType {
  JOB_TYPE_UNSPECIFIED = 0;
  RESTORE = 1;
  BACKUP = 2;
  COPY = 3;
  VERIFY = 4;
  ADMIN = 5;
  ARCHIVE = 6;
  MIGRATE = 7;
  CONSOLIDATE = 8;
  MIGRATED_JOB = 9;
  CONSOLE = 10;
  SYSTEM = 11;
  JOB_COPY = 12;
  SCAN = 13;
};

enum JobLevel {
  JOB_LEVEL_UNSPECIFIED = 0;
  FULL = 1;
  DIFFERENTIAL = 2;
  INCREMENTAL = 3;
  // SINCE = 4; (currently unused)
  VERIFY_CATALOG = 5;
  VERIFY_INIT = 6;
  VERIFY_VOLUME_TO_CATALOG = 7;
  VERIFY_DISK_TO_CATALOG = 8;
  VERIFY_DATA = 9;
  BASE = 10;
  VIRTUAL_FULL = 11;
  NONE = 12;
};

/* Should these functions return a typed response (like now) or rather a generic
 * message SqlResponse { map<string, string>; } ?
 */
service Database {
  // we should somehow have a limit & offset in these requests
  // most queries probably wont need all of them

  // orders of the ids inside the request and the infos in the response
  // are independent of each other,  i.e. if you request info for 2,3,5,
  // then the response may have the order 5,2,3 or 2,5,3!
  rpc ClientInfo (ClientInfoRequest) returns (ClientInfoResponse);
  rpc JobInfo (JobInfoRequest) returns (JobInfoResponse);

  rpc ListClients (ListClientsRequest) returns (ListClientsResponse);
  rpc ListJobs (ListJobsRequest) returns (ListJobsResponse);
};

message ClientInfoRequest {
  bareos.config.CatalogId catalog = 1;
  repeated ClientId ids = 2;
};

message ClientInfoResponse {
  repeated Client clients = 1;
};

message JobInfoRequest {
  bareos.config.CatalogId catalog = 1;
  repeated JobId ids = 2;
};

message JobInfoResponse {
  repeated Job jobs = 1;
};

message Client {
  ClientId id = 1;
  string name = 2;
  string uname = 3;
  bool autoprune = 4;
  int64 FileRetention = 5;
  int64 JobRetention = 6;
};

message BackupData {
  JobLevel level = 1;
  ClientId client = 2;
  uint64 job_files = 3;
  uint64 job_bytes = 4;
};

message Job {
  JobId id = 1;
  string name = 2;
  JobType type = 3;
  optional google.protobuf.Timestamp sched_time = 4;
  optional google.protobuf.Timestamp start_time = 5;
  optional google.protobuf.Timestamp end_time = 6;
  optional string comment = 7;

  oneof extra_job_data {
    BackupData backup = 21;
  };
};

message ListClientFilter {
  oneof filter_type {
    NameFilter name = 1;
    NameFilter uname = 2;
  };
};

message ListClientsRequest {
  bareos.config.CatalogId catalog = 1;
  QueryOptions options = 2;
  repeated ListClientFilter filters = 3;
};

message ListClientsResponse {
  repeated Client clients = 1;
};

message ClientFilter {
  ClientId id = 1;
};

message JobTypeFilter {
  JobType type = 1;
};

message NameFilter {
  string match = 1;
};

message ListJobFilter {
  oneof filter_type {
    ClientFilter client = 1;
    JobTypeFilter type = 2;
    NameFilter name = 3;
  };
};

message ListJobsRequest {
  bareos.config.CatalogId catalog = 1;
  QueryOptions options = 2;
  repeated ListJobFilter filters = 3;
};

message ListJobsResponse {
  repeated Job jobs = 1;
};
