#!/bin/bash

#   BAREOSÂ® - Backup Archiving REcovery Open Sourced
#
#   Copyright (C) 2024-2024 Bareos GmbH & Co. KG
#
#   This program is Free Software; you can redistribute it and/or
#   modify it under the terms of version three of the GNU Affero General Public
#   License as published by the Free Software Foundation and included
#   in the file LICENSE.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301, USA.

#
#  Restore a job using grpc
#

set -e
set -o pipefail
set -u

TestName="$(basename "$(pwd)")"
export TestName

JobName=backup-bareos-fd

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions
#shellcheck source=functions
. functions

get_id()
{
    local log=$1
    local file=$2

    jq -e -s "map(select(.name == \"$file\")) | .[0].id.value" "$log"
}

start_test

CATALOG=$(grpc bareos.config.Config/ListCatalogs "{}" | tee "$log_home/restore.list" | jq -c '.catalogs | .[0] | .id')
grpc bareos.database.Database/ListJobs "{ \"catalog\" : $CATALOG }" | tee "$log_home/jobs.list"
grpc bareos.config.Config/ListJobs "{ \"filters\" : [ { \"type\" : { \"select\" : \"RESTORE\" }}]}" | tee "$log_home/restore_jobs.list"
grpc bareos.config.Config/ListClients "{}" | tee "$log_home/restore_clients.list"

RESTORECLIENT=$(jq -c ".clients | .[0] | .id" "$log_home/restore_clients.list")
RESTOREJOB=$(jq -c ".jobs | .[0] | .id" "$log_home/restore_jobs.list")
JOB=$(jq -sc ".[0] | .job" "$log_home/jobs.list")


echo "client = $RESTORECLIENT"
echo "restorejob = $RESTOREJOB"
echo "job = $JOB"

grpc bareos.restore.Restore/ListSessions "{}" | tee "$log_home/old_sessions.list"

for session in $(jq -c ".sessions[]" "$log_home/old_sessions.list");
do
    grpc bareos.restore.Restore/Cancel "{ \"session\" : $session }"
done

grpc bareos.restore.Restore/Begin "{ \"backup_job\" : $JOB, \"find_job_chain\" : false }" | tee "$log_home/restore.begin"

SESSION=$(jq -c ".session" "$log_home/restore.begin")


grpc bareos.restore.Restore/ListFiles "{\"session\" : $SESSION }" | tee "$log_home/restore.ls.0"
HOME_ID=$(get_id "$log_home/restore.ls.0" "home")
echo "HOME_ID = ${HOME_ID}"

grpc bareos.restore.Restore/PathToFile "{ \"session\" : $SESSION , \"p\" : { \"path\" : \".\" } }" | tee "$log_home/restore.fileid.relative"
grpc bareos.restore.Restore/PathToFile "{ \"session\" : $SESSION , \"p\" : { \"path\" : \"${tmp}/data/build/src/tests/Makefile\" } }" | tee "$log_home/restore.fileid.file"
grpc bareos.restore.Restore/PathToFile "{ \"session\" : $SESSION , \"p\" : { \"path\" : \"${tmp}/data/build/src/tests\" } }" | tee "$log_home/restore.fileid.dir"
CURRENT_ID=$(jq -e '.f.id | if has("value") then .value else 0 end' "$log_home/restore.fileid.relative")
FILE_ID=$(jq -e '.f.id.value' "$log_home/restore.fileid.file")
DIR_ID=$(jq -e '.f.id.value' "$log_home/restore.fileid.dir")

# currently CurrentDirectory and ChangeDirectory return the same thing
grpc bareos.restore.Restore/ChangeDirectory "{ \"session\" : $SESSION , \"directory\" : { \"value\" : $CURRENT_ID } }" | tee "$log_home/restore.cd.relative"
grpc bareos.restore.Restore/CurrentDirectory "{ \"session\" : $SESSION }" | tee "$log_home/restore.cwd.relative"
diff "$log_home/restore.cwd.relative" "$log_home/restore.cd.relative"

grpc bareos.restore.Restore/ChangeDirectory "{ \"session\" : $SESSION , \"directory\" : { \"value\" : $FILE_ID } }" | tee "$log_home/restore.cd.bad" || :

grpc bareos.restore.Restore/ChangeDirectory "{ \"session\" : $SESSION , \"directory\" : { \"value\" : $DIR_ID } }" | tee "$log_home/restore.cd.absolute"
grpc bareos.restore.Restore/CurrentDirectory "{ \"session\" : $SESSION }" | tee "$log_home/restore.cwd.absolute"
diff "$log_home/restore.cwd.absolute" "$log_home/restore.cd.absolute"

grpc bareos.restore.Restore/ListFiles "{\"session\" : $SESSION }" | tee "$log_home/restore.ls.1"
FID=$(jq -s ".[0].id.value" "$log_home/restore.ls.1")
echo ">>>> FID = $FID"
grpc bareos.restore.Restore/ChangeMarkedStatus "{ \"session\" : $SESSION , \"affected_id\" : { \"value\" : $FID }, \"action\" : \"MARK\" }" | tee "$log_home/restore.mark.single"
grpc bareos.restore.Restore/ListFiles "{\"session\" : $SESSION }" | tee "$log_home/restore.ls.2"
# -e tells jq to treat output=false/null as error
jq -e -s "map(select(.id.value == $FID)) | all(.marked)" "$log_home/restore.ls.2"

# FileId = 0 means root directory
grpc bareos.restore.Restore/ListFiles "{\"session\" : $SESSION, \"root\" : { \"value\" : \"0\" } }" | tee "$log_home/restore.ls.by_id"
# both methods should return the same thing
diff "$log_home/restore.ls.by_id" "$log_home/restore.ls.0"


grpc bareos.restore.Restore/ChangeMarkedStatus "{ \"session\" : $SESSION , \"affected_id\" : { \"value\" : $HOME_ID }, \"action\" : \"MARK\", \"recursive\" : true }" | tee "$log_home/restore.mark.recursive"
RESTOREOPTIONS="{
        \"restore_location\" : \"tmp/bareos-restores\",
        \"restore_job\" : $RESTOREJOB,
        \"restore_client\" : $RESTORECLIENT,
        \"replace\" : \"NEVER\"
}"

grpc bareos.restore.Restore/Run "{\"session\" : $SESSION, \"restore_options\" : $RESTOREOPTIONS }" | tee "$log_home/restore.run"

# check that the job actually exists in the database
JOBID=$(jq ".jobid | .jobid" "$log_home/restore.run")
grpc bareos.database.Database/ListJobs "{ \"catalog\" : $CATALOG }" | tee "$log_home/jobs.list.after"
jq -s "map(.job.jobid) | any(. == $JOBID)" "$log_home/jobs.list.after"

end_test
