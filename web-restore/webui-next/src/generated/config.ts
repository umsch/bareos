// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "config.proto" (package "bareos.config", syntax proto3)
// tslint:disable
//
//
// LICENSE HERE
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { JobType } from "./common";
/**
 * @generated from protobuf message bareos.config.ListClientsRequest
 */
export interface ListClientsRequest {
}
/**
 * @generated from protobuf message bareos.config.ClientId
 */
export interface ClientId {
    /**
     * @generated from protobuf field: bytes name = 1;
     */
    name: Uint8Array;
}
/**
 * @generated from protobuf message bareos.config.Client
 */
export interface Client {
    /**
     * @generated from protobuf field: bareos.config.ClientId id = 1;
     */
    id?: ClientId;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string address = 3;
     */
    address: string;
}
/**
 * @generated from protobuf message bareos.config.ListClientsResponse
 */
export interface ListClientsResponse {
    /**
     * @generated from protobuf field: repeated bareos.config.Client clients = 1;
     */
    clients: Client[];
}
/**
 * @generated from protobuf message bareos.config.JobId
 */
export interface JobId {
    /**
     * @generated from protobuf field: bytes name = 1;
     */
    name: Uint8Array;
}
/**
 * @generated from protobuf message bareos.config.Job
 */
export interface Job {
    /**
     * @generated from protobuf field: bareos.config.JobId id = 1;
     */
    id?: JobId;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bareos.common.JobType type = 3;
     */
    type: JobType;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
}
/**
 * @generated from protobuf message bareos.config.JobTypeFilter
 */
export interface JobTypeFilter {
    /**
     * @generated from protobuf field: bareos.common.JobType select = 1;
     */
    select: JobType;
}
/**
 * @generated from protobuf message bareos.config.JobFilter
 */
export interface JobFilter {
    /**
     * @generated from protobuf oneof: filter_type
     */
    filterType: {
        oneofKind: "type";
        /**
         * @generated from protobuf field: bareos.config.JobTypeFilter type = 1;
         */
        type: JobTypeFilter;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message bareos.config.ListJobsRequest
 */
export interface ListJobsRequest {
    /**
     * if no filter is set, then all jobs are accepted,
     * otherwise only jobs are accepted that match all
     * of the supplied filters
     *
     * @generated from protobuf field: repeated bareos.config.JobFilter filters = 1;
     */
    filters: JobFilter[];
}
/**
 * @generated from protobuf message bareos.config.ListJobsResponse
 */
export interface ListJobsResponse {
    /**
     * @generated from protobuf field: repeated bareos.config.Job jobs = 1;
     */
    jobs: Job[];
}
/**
 * @generated from protobuf message bareos.config.CatalogId
 */
export interface CatalogId {
    /**
     * @generated from protobuf field: bytes name = 1;
     */
    name: Uint8Array;
}
/**
 * @generated from protobuf message bareos.config.Catalog
 */
export interface Catalog {
    /**
     * @generated from protobuf field: bareos.config.CatalogId id = 1;
     */
    id?: CatalogId;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string dbname = 3;
     */
    dbname: string;
}
/**
 * @generated from protobuf message bareos.config.ListCatalogsRequest
 */
export interface ListCatalogsRequest {
}
/**
 * @generated from protobuf message bareos.config.ListCatalogsResponse
 */
export interface ListCatalogsResponse {
    /**
     * @generated from protobuf field: repeated bareos.config.Catalog catalogs = 1;
     */
    catalogs: Catalog[];
}
/**
 * @generated from protobuf message bareos.config.GetDefinitionRequest
 */
export interface GetDefinitionRequest {
    /**
     * @generated from protobuf oneof: config_type
     */
    configType: {
        oneofKind: "client";
        /**
         * @generated from protobuf field: bareos.config.ClientId client = 1;
         */
        client: ClientId;
    } | {
        oneofKind: "catalog";
        /**
         * @generated from protobuf field: bareos.config.CatalogId catalog = 2;
         */
        catalog: CatalogId;
    } | {
        oneofKind: "job";
        /**
         * @generated from protobuf field: bareos.config.JobId job = 3;
         */
        job: JobId;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message bareos.config.GetDefinitionResponse
 */
export interface GetDefinitionResponse {
    /**
     * @generated from protobuf field: map<string, string> set_options = 1;
     */
    setOptions: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ListClientsRequest$Type extends MessageType<ListClientsRequest> {
    constructor() {
        super("bareos.config.ListClientsRequest", []);
    }
    create(value?: PartialMessage<ListClientsRequest>): ListClientsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListClientsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListClientsRequest): ListClientsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListClientsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.ListClientsRequest
 */
export const ListClientsRequest = new ListClientsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientId$Type extends MessageType<ClientId> {
    constructor() {
        super("bareos.config.ClientId", [
            { no: 1, name: "name", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ClientId>): ClientId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ClientId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientId): ClientId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes name */ 1:
                    message.name = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes name = 1; */
        if (message.name.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.ClientId
 */
export const ClientId = new ClientId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Client$Type extends MessageType<Client> {
    constructor() {
        super("bareos.config.Client", [
            { no: 1, name: "id", kind: "message", T: () => ClientId },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Client>): Client {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<Client>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Client): Client {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bareos.config.ClientId id */ 1:
                    message.id = ClientId.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string address */ 3:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Client, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bareos.config.ClientId id = 1; */
        if (message.id)
            ClientId.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string address = 3; */
        if (message.address !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.Client
 */
export const Client = new Client$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListClientsResponse$Type extends MessageType<ListClientsResponse> {
    constructor() {
        super("bareos.config.ListClientsResponse", [
            { no: 1, name: "clients", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Client }
        ]);
    }
    create(value?: PartialMessage<ListClientsResponse>): ListClientsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clients = [];
        if (value !== undefined)
            reflectionMergePartial<ListClientsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListClientsResponse): ListClientsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bareos.config.Client clients */ 1:
                    message.clients.push(Client.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListClientsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bareos.config.Client clients = 1; */
        for (let i = 0; i < message.clients.length; i++)
            Client.internalBinaryWrite(message.clients[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.ListClientsResponse
 */
export const ListClientsResponse = new ListClientsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobId$Type extends MessageType<JobId> {
    constructor() {
        super("bareos.config.JobId", [
            { no: 1, name: "name", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<JobId>): JobId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<JobId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobId): JobId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes name */ 1:
                    message.name = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes name = 1; */
        if (message.name.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.JobId
 */
export const JobId = new JobId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Job$Type extends MessageType<Job> {
    constructor() {
        super("bareos.config.Job", [
            { no: 1, name: "id", kind: "message", T: () => JobId },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["bareos.common.JobType", JobType] },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Job>): Job {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.type = 0;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<Job>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Job): Job {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bareos.config.JobId id */ 1:
                    message.id = JobId.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bareos.common.JobType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Job, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bareos.config.JobId id = 1; */
        if (message.id)
            JobId.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bareos.common.JobType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.Job
 */
export const Job = new Job$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobTypeFilter$Type extends MessageType<JobTypeFilter> {
    constructor() {
        super("bareos.config.JobTypeFilter", [
            { no: 1, name: "select", kind: "enum", T: () => ["bareos.common.JobType", JobType] }
        ]);
    }
    create(value?: PartialMessage<JobTypeFilter>): JobTypeFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.select = 0;
        if (value !== undefined)
            reflectionMergePartial<JobTypeFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobTypeFilter): JobTypeFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bareos.common.JobType select */ 1:
                    message.select = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobTypeFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bareos.common.JobType select = 1; */
        if (message.select !== 0)
            writer.tag(1, WireType.Varint).int32(message.select);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.JobTypeFilter
 */
export const JobTypeFilter = new JobTypeFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobFilter$Type extends MessageType<JobFilter> {
    constructor() {
        super("bareos.config.JobFilter", [
            { no: 1, name: "type", kind: "message", oneof: "filterType", T: () => JobTypeFilter }
        ]);
    }
    create(value?: PartialMessage<JobFilter>): JobFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filterType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<JobFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobFilter): JobFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bareos.config.JobTypeFilter type */ 1:
                    message.filterType = {
                        oneofKind: "type",
                        type: JobTypeFilter.internalBinaryRead(reader, reader.uint32(), options, (message.filterType as any).type)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bareos.config.JobTypeFilter type = 1; */
        if (message.filterType.oneofKind === "type")
            JobTypeFilter.internalBinaryWrite(message.filterType.type, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.JobFilter
 */
export const JobFilter = new JobFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListJobsRequest$Type extends MessageType<ListJobsRequest> {
    constructor() {
        super("bareos.config.ListJobsRequest", [
            { no: 1, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => JobFilter }
        ]);
    }
    create(value?: PartialMessage<ListJobsRequest>): ListJobsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<ListJobsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListJobsRequest): ListJobsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bareos.config.JobFilter filters */ 1:
                    message.filters.push(JobFilter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListJobsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bareos.config.JobFilter filters = 1; */
        for (let i = 0; i < message.filters.length; i++)
            JobFilter.internalBinaryWrite(message.filters[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.ListJobsRequest
 */
export const ListJobsRequest = new ListJobsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListJobsResponse$Type extends MessageType<ListJobsResponse> {
    constructor() {
        super("bareos.config.ListJobsResponse", [
            { no: 1, name: "jobs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Job }
        ]);
    }
    create(value?: PartialMessage<ListJobsResponse>): ListJobsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobs = [];
        if (value !== undefined)
            reflectionMergePartial<ListJobsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListJobsResponse): ListJobsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bareos.config.Job jobs */ 1:
                    message.jobs.push(Job.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListJobsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bareos.config.Job jobs = 1; */
        for (let i = 0; i < message.jobs.length; i++)
            Job.internalBinaryWrite(message.jobs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.ListJobsResponse
 */
export const ListJobsResponse = new ListJobsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CatalogId$Type extends MessageType<CatalogId> {
    constructor() {
        super("bareos.config.CatalogId", [
            { no: 1, name: "name", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CatalogId>): CatalogId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<CatalogId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogId): CatalogId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes name */ 1:
                    message.name = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes name = 1; */
        if (message.name.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.CatalogId
 */
export const CatalogId = new CatalogId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Catalog$Type extends MessageType<Catalog> {
    constructor() {
        super("bareos.config.Catalog", [
            { no: 1, name: "id", kind: "message", T: () => CatalogId },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dbname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Catalog>): Catalog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.dbname = "";
        if (value !== undefined)
            reflectionMergePartial<Catalog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Catalog): Catalog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bareos.config.CatalogId id */ 1:
                    message.id = CatalogId.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string dbname */ 3:
                    message.dbname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Catalog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bareos.config.CatalogId id = 1; */
        if (message.id)
            CatalogId.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string dbname = 3; */
        if (message.dbname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dbname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.Catalog
 */
export const Catalog = new Catalog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCatalogsRequest$Type extends MessageType<ListCatalogsRequest> {
    constructor() {
        super("bareos.config.ListCatalogsRequest", []);
    }
    create(value?: PartialMessage<ListCatalogsRequest>): ListCatalogsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListCatalogsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCatalogsRequest): ListCatalogsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListCatalogsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.ListCatalogsRequest
 */
export const ListCatalogsRequest = new ListCatalogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCatalogsResponse$Type extends MessageType<ListCatalogsResponse> {
    constructor() {
        super("bareos.config.ListCatalogsResponse", [
            { no: 1, name: "catalogs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Catalog }
        ]);
    }
    create(value?: PartialMessage<ListCatalogsResponse>): ListCatalogsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.catalogs = [];
        if (value !== undefined)
            reflectionMergePartial<ListCatalogsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCatalogsResponse): ListCatalogsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bareos.config.Catalog catalogs */ 1:
                    message.catalogs.push(Catalog.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCatalogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bareos.config.Catalog catalogs = 1; */
        for (let i = 0; i < message.catalogs.length; i++)
            Catalog.internalBinaryWrite(message.catalogs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.ListCatalogsResponse
 */
export const ListCatalogsResponse = new ListCatalogsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDefinitionRequest$Type extends MessageType<GetDefinitionRequest> {
    constructor() {
        super("bareos.config.GetDefinitionRequest", [
            { no: 1, name: "client", kind: "message", oneof: "configType", T: () => ClientId },
            { no: 2, name: "catalog", kind: "message", oneof: "configType", T: () => CatalogId },
            { no: 3, name: "job", kind: "message", oneof: "configType", T: () => JobId }
        ]);
    }
    create(value?: PartialMessage<GetDefinitionRequest>): GetDefinitionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.configType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetDefinitionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDefinitionRequest): GetDefinitionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bareos.config.ClientId client */ 1:
                    message.configType = {
                        oneofKind: "client",
                        client: ClientId.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).client)
                    };
                    break;
                case /* bareos.config.CatalogId catalog */ 2:
                    message.configType = {
                        oneofKind: "catalog",
                        catalog: CatalogId.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).catalog)
                    };
                    break;
                case /* bareos.config.JobId job */ 3:
                    message.configType = {
                        oneofKind: "job",
                        job: JobId.internalBinaryRead(reader, reader.uint32(), options, (message.configType as any).job)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDefinitionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bareos.config.ClientId client = 1; */
        if (message.configType.oneofKind === "client")
            ClientId.internalBinaryWrite(message.configType.client, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bareos.config.CatalogId catalog = 2; */
        if (message.configType.oneofKind === "catalog")
            CatalogId.internalBinaryWrite(message.configType.catalog, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bareos.config.JobId job = 3; */
        if (message.configType.oneofKind === "job")
            JobId.internalBinaryWrite(message.configType.job, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.GetDefinitionRequest
 */
export const GetDefinitionRequest = new GetDefinitionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDefinitionResponse$Type extends MessageType<GetDefinitionResponse> {
    constructor() {
        super("bareos.config.GetDefinitionResponse", [
            { no: 1, name: "set_options", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<GetDefinitionResponse>): GetDefinitionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.setOptions = {};
        if (value !== undefined)
            reflectionMergePartial<GetDefinitionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDefinitionResponse): GetDefinitionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> set_options */ 1:
                    this.binaryReadMap1(message.setOptions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GetDefinitionResponse["setOptions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetDefinitionResponse["setOptions"] | undefined, val: GetDefinitionResponse["setOptions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bareos.config.GetDefinitionResponse.set_options");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: GetDefinitionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> set_options = 1; */
        for (let k of globalThis.Object.keys(message.setOptions))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.setOptions[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bareos.config.GetDefinitionResponse
 */
export const GetDefinitionResponse = new GetDefinitionResponse$Type();
/**
 * @generated ServiceType for protobuf service bareos.config.Config
 */
export const Config = new ServiceType("bareos.config.Config", [
    { name: "ListClients", options: {}, I: ListClientsRequest, O: ListClientsResponse },
    { name: "ListJobs", options: {}, I: ListJobsRequest, O: ListJobsResponse },
    { name: "ListCatalogs", options: {}, I: ListCatalogsRequest, O: ListCatalogsResponse },
    { name: "GetDefinition", options: {}, I: GetDefinitionRequest, O: GetDefinitionResponse }
]);
